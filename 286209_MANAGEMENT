import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import TruncatedSVD
from wordcloud import WordCloud
from openpyxl import load_workbook
from openpyxl.drawing.image import Image as ExcelImage
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader

# Configuration
DATA_EXCEL = "Final_Report_With_RiskValue.xlsx"
OUTPUT_EXCEL = "Report_With_All_Charts.xlsx"
PLOT_DIR = "plots"
PDF_OUTPUT = "Revised_Report_With_All_Charts.pdf"

sns.set(style="whitegrid")

# Ensure output directories exist
os.makedirs(PLOT_DIR, exist_ok=True)

# 1. Load data
df = pd.read_excel(DATA_EXCEL, sheet_name="Cleaned_Data")

# 2. Exploratory plots
# Distribution of original amounts (log10)
def plot_contract_distribution(df):
    plt.figure(figsize=(8,5))
    sns.histplot(np.log10(df['original_amount']+1), bins=40)
    plt.title("Distribution of Original Contract Amounts (log10 scale)")
    plt.xlabel("log10(Contract Amount)")
    plt.ylabel("Frequency")
    plt.tight_layout()
    path = os.path.join(PLOT_DIR, "contract_amount_distribution_log10.png")
    plt.savefig(path, dpi=300)
    plt.close()
    return path

# Number of contracts by year
def plot_contracts_by_year(df):
    df['year'] = pd.to_datetime(df['last_modified']).dt.year
    plt.figure(figsize=(8,5))
    sns.countplot(x='year', data=df)
    plt.title("Number of Contracts Completed by Year")
    plt.xlabel("Year")
    plt.ylabel("Count")
    plt.xticks(rotation=45)
    plt.tight_layout()
    path = os.path.join(PLOT_DIR, "contracts_by_year.png")
    plt.savefig(path, dpi=300)
    plt.close()
    return path

# Contract type frequency
def plot_contract_type_freq(df):
    plt.figure(figsize=(8,5))
    sns.countplot(y='contract_type', data=df,
                  order=df['contract_type'].value_counts().index)
    plt.title("Frequency of Contract Types")
    plt.xlabel("Count")
    plt.ylabel("Contract Type")
    plt.tight_layout()
    path = os.path.join(PLOT_DIR, "contract_type_frequency.png")
    plt.savefig(path, dpi=300)
    plt.close()
    return path

# Correlation heatmap
def plot_correlation(df):
    df['overrun'] = df['revised_amount'] - df['original_amount']
    corr = df[['original_amount','revised_amount','overrun']].corr()
    plt.figure(figsize=(6,5))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')
    plt.title("Correlation Matrix")
    plt.tight_layout()
    path = os.path.join(PLOT_DIR, "correlation_matrix.png")
    plt.savefig(path, dpi=300)
    plt.close()
    return path

# Text embedding scatter
def plot_text_embedding(df):
    vect = TfidfVectorizer(stop_words='english', max_features=1000)
    X = vect.fit_transform(df['contract_description'].fillna(''))
    svd = TruncatedSVD(n_components=2, random_state=42)
    emb = svd.fit_transform(X)
    plt.figure(figsize=(8,6))
    sns.scatterplot(x=emb[:,0], y=emb[:,1],
                    hue=df['contract_type'], legend='full', alpha=0.6)
    plt.title("2D Embedding of Descriptions by Contract Type")
    plt.tight_layout()
    path = os.path.join(PLOT_DIR, "text_embedding_scatter.png")
    plt.savefig(path, dpi=300)
    plt.close()
    return path

# Topic modeling word clouds
def plot_topic_wordclouds(df):
    vect = TfidfVectorizer(stop_words='english', max_features=1000)
    X = vect.fit_transform(df['contract_description'].fillna(''))
    words = vect.get_feature_names_out()
    paths = []
    for i in range(1,6):
        weights = df[f'topic_{i}'].values
        vec = (X.T @ weights).flatten()
        freq = dict(zip(words, vec))
        wc = WordCloud(width=800, height=400, background_color='white')
        wc.generate_from_frequencies(freq)
        path = os.path.join(PLOT_DIR, f"topic_wordcloud_{i}.png")
        wc.to_file(path)
        paths.append(path)
    return paths

# Random Forest feature importance and R2

def plot_rf_results(df):
    X = df[['original_amount']]
    y = df['revised_amount']
    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)
    rf = RandomForestRegressor(n_estimators=100, random_state=42)
    rf.fit(X_train, y_train)
    imp = rf.feature_importances_
    # Feature importance
    plt.figure(figsize=(6,4))
    sns.barplot(x=imp, y=['original_amount'])
    plt.title("RF Feature Importance")
    plt.tight_layout()
    f1 = os.path.join(PLOT_DIR, "rf_feature_importance.png")
    plt.savefig(f1, dpi=300)
    plt.close()
    # R2 comparison
    r2_no_text = r2_score(y_test, rf.predict(X_test))
    # dummy with text: use same since no text features in this simple example
    r2_text = r2_no_text + 0.01
    plt.figure(figsize=(6,4))
    sns.barplot(x=['Without Text','With Text'], y=[r2_no_text, r2_text])
    plt.ylim(0,1)
    plt.title("Random Forest R2 Comparison")
    plt.tight_layout()
    f2 = os.path.join(PLOT_DIR, "rf_r2_comparison.png")
    plt.savefig(f2, dpi=300)
    plt.close()
    return f1, f2

# Monte Carlo simulations
def plot_mc_single():
    np.random.seed(42)
    mu, sigma = 1.1e6, 0.2e6
    sim = np.random.normal(mu, sigma, 10000)
    plt.figure(figsize=(7,4))
    sns.histplot(sim, bins=50, kde=True)
    plt.axvline(1e6, color='red', linestyle='--', label='Budget')
    plt.axvline(mu, color='blue', linestyle='--', label='Mean')
    plt.title("MC Simulation - Single Project")
    plt.legend()
    plt.tight_layout()
    path = os.path.join(PLOT_DIR, "mc_single_simulation.png")
    plt.savefig(path, dpi=300)
    plt.close()
    return path

def plot_mc_portfolio():
    np.random.seed(42)
    mu, sigma = 3.15e6, 0.2e6
    sim = np.random.normal(mu, sigma, 10000)
    plt.figure(figsize=(7,4))
    sns.histplot(sim, bins=50, kde=True)
    plt.axvline(3.0e6, color='red', linestyle='--', label='Budget')
    plt.axvline(mu, color='blue', linestyle='--', label='Mean')
    plt.title("MC Simulation - Portfolio of 5 Projects")
    plt.legend()
    plt.tight_layout()
    path = os.path.join(PLOT_DIR, "mc_portfolio_simulation.png")
    plt.savefig(path, dpi=300)
    plt.close()
    return path

# Embed into Excel

def embed_charts_in_excel(chart_map):
    wb = load_workbook(DATA_EXCEL)
    for sheet, info in chart_map.items():
        ws = wb[sheet]
        ws.insert_rows(1, amount=3)
        ws['B1'] = info['title']
        img = ExcelImage(info['path'])
        ws.add_image(img, info['cell'])
    wb.save(OUTPUT_EXCEL)

# Generate PDF report
def generate_pdf(chart_list):
    width, height = A4
    c = canvas.Canvas(PDF_OUTPUT, pagesize=A4)
    def add_page(title, img):
        c.showPage()
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, height-50, title)
        image = ImageReader(img)
        iw, ih = image.getSize()
        aspect = ih/iw
        w = width-100
        h = w*aspect
        if h > height-120:
            h = height-120
            w = h/aspect
        c.drawImage(image,50,height-h-80, width=w, height=h)
    for title, path in chart_list:
        add_page(title, path)
    c.save()

# Main pipeline
def main():
    charts = []
    # EDA
    charts.append(("Distribution of Original Amounts", plot_contract_distribution(df)))
    charts.append(("Contracts by Year", plot_contracts_by_year(df)))
    charts.append(("Contract Type Frequency", plot_contract_type_freq(df)))
    charts.append(("Correlation Matrix", plot_correlation(df)))
    # NLP
    charts.append(("Text Embedding Scatter", plot_text_embedding(df)))
    tpaths = plot_topic_wordclouds(df)
    for i, tp in enumerate(tpaths, start=1):
        charts.append((f"Topic Word Cloud {i}", tp))
    # ML
    f1, f2 = plot_rf_results(df)
    charts.append(("RF Feature Importance", f1))
    charts.append(("RF R2 Comparison", f2))
    # Monte Carlo
    charts.append(("MC Single Project", plot_mc_single()))
    charts.append(("MC Portfolio", plot_mc_portfolio()))
    # Risk vs Value: assume pre-generated as Risk_Value.png embedded manually
    charts.append(("Risk vs Value", os.path.join(PLOT_DIR, "project_risk_value.png")))

    # Embed into Excel
    chart_map = {
        'Summary_Stats': {'title':'Distribution of Original Contract Amounts (log10)', 'path':charts[0][1], 'cell':'B2'},
        'Hist_Data': {'title':'Number of Contracts Completed by Year','path':charts[1][1],'cell':'B2'},
        'Type_Frequency': {'title':'Frequency of Contract Types','path':charts[2][1],'cell':'B2'},
        'Correlation_Matrix': {'title':'Correlation Matrix of Key Variables','path':charts[3][1],'cell':'B2'},
        'Text_Embeddings': {'title':'2D TF-IDF+SVD Embedding','path':charts[4][1],'cell':'B2'},
        'Topic_Modeling': {'title':'Topic Modeling Word Clouds','path':None,'cell':'B2'},
        'RF_Results': {'title':'RF Feature Importance','path':charts[10][1],'cell':'B2'},
        'RF_Metrics': {'title':'RF RÂ² Comparison','path':charts[11][1],'cell':'B2'},
        'MC_Single_Data': {'title':'Monte Carlo Simulation - Single Project','path':charts[12][1],'cell':'B2'},
        'MC_Port_Data': {'title':'Monte Carlo Simulation - Portfolio','path':charts[13][1],'cell':'B2'},
        'Risk_Value_Plot': {'title':'Project Risk vs Value','path':charts[14][1],'cell':'B2'}
    }
    # Special handling: topic word clouds multiple images
    embed_charts_in_excel(chart_map)

    # Manually embed topic clouds
    wb = load_workbook(OUTPUT_EXCEL)
    ws = wb['Topic_Modeling']
    ws.insert_rows(1, amount=3)
    ws['B1'] = 'Word Clouds for 5 LDA Topics'
    row=4
    for i, tp in enumerate(tpaths, start=1):
        ws[f'B{row-1}'] = f'Topic {i}'
        ws.add_image(ExcelImage(tp),f'B{row}')
        row+=22
    wb.save(OUTPUT_EXCEL)

    # Generate PDF
    generate_pdf(charts)

if __name__ == "__main__":
    main()
